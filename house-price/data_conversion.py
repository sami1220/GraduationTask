import numpy as np
import pandas as pd
import scipy.stats as sp
import joblib

def change_df(df):
    """入力されたデータ(df)から特徴量エンジニアリングするための関数"""
    #欠損値のある列を削除(入力値からは基本使わない)
    nonnull_list = []
    for col in df.columns:
        nonnull = df[col].count()
        if nonnull == 0:
            nonnull_list.append(col)
    df = df.drop(nonnull_list, axis=1)

    # 1.各市区町村の名前から、市区町村コードを書き出して新しい特徴量生成
    city_code_dict = joblib.load('pickle/dict_city_code.pickle') 
    df['市区町村コード'] = df['市区町村名'].replace(city_code_dict)

    # 2.入力された間取りから部屋数を抽出
    room_count_sr = pd.Series(df['間取り'])
    ### 部屋数の入力は全角と想定（一部半角も対応）
    room_count_dict = { '１ＤＫ': 1, '１ＤＫ＋Ｓ': 1, '１Ｋ': 1, '１Ｋ＋Ｓ': 1, '１Ｌ': 1, '１Ｌ＋Ｓ': 1, '１ＬＤ＋Ｓ': 1,
                        '１ＬＤＫ': 1, '１ＬＤＫ＋Ｓ': 1, '１ＬＫ': 1, '１Ｒ': 1, '１Ｒ＋Ｓ': 1, '２Ｄ': 2, '２ＤＫ': 2,
                        '２ＤＫ＋Ｓ': 2, '２Ｋ': 2, '２Ｋ＋Ｓ': 2, '２ＬＤ': 2, '２ＬＤ＋Ｓ': 2, '２ＬＤＫ': 2, '２ＬＤＫ＋Ｓ': 2,
                        '２ＬＫ': 2, '２ＬＫ＋Ｓ': 2, '３ＤＫ': 3, '３ＤＫ＋Ｓ': 3, '３Ｋ': 3, '３Ｋ＋Ｓ': 3, '３ＬＤ': 3, '３ＬＤ＋Ｓ': 3, 
                        '３ＬＤＫ': 3, '３ＬＤＫ＋Ｋ': 3, '３ＬＤＫ＋Ｓ': 3, '３ＬＫ': 3, '４ＤＫ': 4, '４ＤＫ＋Ｓ': 4, '４Ｋ': 4,
                        '４ＬＤＫ': 4, '４ＬＤＫ＋Ｓ': 4, '５ＤＫ': 5, '５ＬＤＫ': 5, '５ＬＤＫ＋Ｓ': 5, '６ＤＫ': 6, '６ＬＤＫ': 6,
                        '６ＬＤＫ＋Ｓ': 6, '７ＬＤＫ': 7,'１ＤＫ＋Ｋ':1,'２Ｌ':2,'２Ｌ＋Ｓ':2,'２ＬＤＫ＋Ｋ':2,'３Ｄ':3,'４Ｄ':4,
                        '４Ｌ':4,'４Ｌ＋Ｋ':4,'４ＬＤＫ＋Ｋ':4,'５Ｋ':5,'５ＬＤＫ＋Ｋ':5,'７ＤＫ':7,'７ＬＤＫ＋Ｓ':7,'８ＬＤＫ':8,
                        '８ＬＤＫ＋Ｓ':8, 'ワンルーム': 1, '1R': 1, '1K': 1, '1DK': 1, '1LDK' :1, '2K': 2,'2K': 2, '2DK': 2, '2LDK' :2, 
                        '3K': 3, '3DK': 3, '3LDK' :3, '4K': 4, '4DK': 4, '4LDK' :4,'5K': 5, '5DK': 5, '5LDK' :5
                        }
    df['部屋の数'] = room_count_sr.replace(room_count_dict)

    # 3.和暦で入力された建築年を経過年数に変換する
    y_list = {}
    for i in df["建築年"].value_counts().keys():
        if "平成" in i:
            num = float(i.split("平成")[1].split("年")[0])
            year = 33 - num
        if "令和" in i:
            num = float(i.split("令和")[1].split("年")[0])
            year = 3 - num
        if "昭和" in i:
            num = float(i.split("昭和")[1].split("年")[0])
            year = 96 - num
        y_list[i] = year
    y_list["戦前"] = 76
    df["建築年"] = df["建築年"].replace(y_list)

    minus_year_sr = pd.Series(df['建築年'])
    def add(x):
        return x - x * 2
    df['建築年（マイナス表記）'] = minus_year_sr.apply(add)
    df['建築年（マイナス表記）'] = df['建築年（マイナス表記）'].fillna(df['建築年（マイナス表記）'].median()) 

    # 4.建築年から耐震基準を判定　※1981年（築40年）より古い物件は旧耐震基準
    year_sr = pd.Series(df['建築年'])
    df['耐震基準'] = year_sr.apply(lambda x:0 if x >= 40 else 1)

    # 5.面積（㎡）と建築年の平均を新しい特徴量へ
    roomsize_year_df = df.loc[:,['面積（㎡）','建築年（マイナス表記）']]
    roomsize_bldyear_df = roomsize_year_df.sum(axis=1) / 2
    df['面積・建築年（std）'] = roomsize_bldyear_df

    # 6.建築年と耐震基準の平均数値を新しい特徴量へ
    minus_array_scaler = sp.stats.zscore(df['建築年（マイナス表記）'], axis=0) #建築年を標準化
    bld_year_scaler = sp.stats.zscore(df['耐震基準'], axis=0) #耐震基準を標準化
    
    bld_concat = pd.concat([pd.DataFrame(minus_array_scaler), pd.DataFrame(bld_year_scaler)], axis=1)#結合
    new_bld_sr = bld_concat.sum(axis=1) / 2 #平均とる
    df['建築年・耐震基準(std)'] = new_bld_sr

    # 7.各都道府県の名前から人口数の特徴量を生成-2019
    people_2019_dict = {'北海道':5250000,'青森県':1246000,'岩手県':1227000,'宮城県':2306000,'秋田県':966000,'山形県':1078000,'福島県':1846000,'茨城県':2860000,
                    '栃木県':1934000,'群馬県':1942000,'埼玉県':7350000,'千葉県':6259000,'東京都':13921000,'神奈川県':9198000,'新潟県':2223000,'富山県':1044000,
                    '石川県':1138000,'福井県':768000,'山梨県':811000,'長野県':2049000,'岐阜県':1987000,'静岡県':3644000,'愛知県':7552000,'三重県':1781000,
                    '滋賀県':1414000,'京都府':2583000,'大阪府':8809000,'兵庫県':5466000,'奈良県':1330000,'和歌山県':925000,'鳥取県':556000,'島根県':674000,
                    '岡山県':1890000,'広島県':2804000,'山口県':1358000,'徳島県':728000,'香川県':956000,'愛媛県':1339000,'高知県':698000,'福岡県':5104000,
                    '佐賀県':815000,'長崎県':1327000,'熊本県':1748000,'大分県':1135000,'宮崎県':1073000,'鹿児島県':1602000,'沖縄県':1453000
                    }
    df['都道府県人口2019'] = df['都道府県名'].replace(people_2019_dict)

    # 8.各都道府県の名前から人口数の特徴量を生成-2019
    foreigner_dict = {'北海道':42485,'青森県':6386,'岩手県':8170,'宮城県':23986,'秋田県':4354,'山形県':8058,'福島県':15559,
                    '茨城県':71125,'栃木県':43732,'群馬県':61689,'埼玉県':196043,'千葉県':167512,'東京都':593458,'神奈川県':235233,'新潟県':18861,
                    '富山県':19850,'石川県':16881,'福井県':15823,'山梨県':17179,'長野県':38446,'岐阜県':60206,'静岡県':100148,'愛知県':281153,
                    '三重県':56590,'滋賀県':33929,'京都府':64972,'大阪府':255894,'兵庫県':115681,'奈良県':13951,'和歌山県':7169,'鳥取県':5042,
                    '島根県':9342,'岡山県':31569,'広島県':56898,'山口県':17892,'徳島県':6592,'香川県':14266,'愛媛県':13540,'高知県':4967,
                    '福岡県':83468,'佐賀県':7367,'長崎県':10995,'熊本県':17942,'大分県':14081,'宮崎県':7850,'鹿児島県':12215,'沖縄県':21220
                    }
    df['都道府県外国人数2019'] =  df['都道府県名'].replace(foreigner_dict)

    # 9.市区町村コードからその市区町村の転入、転出の年代別の特徴量を10個生成する
    city_df = pd.read_csv('csv/転入_転出.csv')
    in_num = {}
    in_65 = {}
    in_25_29 = {}
    in_30_34 = {}
    in_35_39 = {}
    out_num = {}
    out_65 = {}
    out_25_29 = {}
    out_30_34 = {}
    out_35_39 = {}

    dict_list = [in_num, in_65, in_25_29 ,in_30_34 ,in_35_39,
                out_num ,out_65 ,out_25_29 ,out_30_34 ,out_35_39]
    #読み込んだcsv(df)のcolumns名をリスト化
    df_col = ["転入_総人数", "転入65歳以上", "転入25歳～29歳", "転入30歳～34歳", "転入35歳～39歳", 
                "転出_総人数", "転出65歳以上", "転出25歳～29歳", "転出30歳～34歳", "35歳～39歳"]
    ### 空の辞書にdfの列データを格納
    for dic,column in zip(dict_list, df_col):
        for k, v in zip([i for i in city_df["市区町村コード"]], [i for i in city_df[column]]):
            dic[k] = v
            
    new_sr = df['市区町村コード']
    new_column_lis = ['転入_総数','転入_65','転入_25_29','転入_30_34','転入_35_39',
                    '転出_総数','転出_65','転出_25_29','転出_30_34','転出_35_39']
    ### 市区町村コードを辞書データで変換し新しい特徴量を生成
    for dic, n_col in zip(dict_list, new_column_lis):
        df[n_col] = new_sr.replace(dic)

    # 10.市区町村コードから住宅のエリアごと供給数などの特徴量を生成する
    pepole_df = pd.read_csv('csv/市区町村のデータ色々.csv')
    # csvから読み込んだdfを前処理する
    pepole_df = pepole_df.iloc[3:,3:].reset_index()
    pepole_df["J"] = pepole_df["J"].fillna(0)
    null_dict = {'-':0}
    pepole_df = pepole_df.replace(null_dict)

    ### 住宅の総数
    people_dict = {}
    for k, v in zip([i for i in pepole_df["J"].astype(int)], [i for i in pepole_df["D"]]):
        people_dict[k] = v
    people_dict = {k: int(v.replace(',', '')) for k, v in people_dict.items()} 
    df['住宅数_総数'] = df['市区町村コード'].replace(people_dict).astype(int)

    ### 住宅空き家の数
    air_room_dict = {}
    for k, v in zip([i for i in pepole_df["J"].astype(int)], [i for i in pepole_df["D.6"]]):
        air_room_dict[k] = v
    air_room_dict = {k: int(v.replace(',', '')) for k, v in air_room_dict.items()} 
    df['住宅空き家数'] = df['市区町村コード'].replace(air_room_dict).astype(int)

    ### 公営の借家数
    rent_country = pd.read_csv('csv/公営の借家数.csv')
    rent_country_dict = {}
    for k, v in zip([i for i in rent_country["市区町村コード"].astype(int)], [i for i in rent_country["D"]]):
        rent_country_dict[k] = v
    rent_country_dict = {k: int(v.replace(',', '')) for k, v in rent_country_dict.items()} 
    df['公営の借家数'] = df['市区町村コード'].replace(rent_country_dict).astype(int)

    # 11.駅距離と面積の上位75％をラベルわけ 
    df['面積_75%'] = df['面積（㎡）'].apply(lambda x:1 if x >= 75 else 0)

    # 12.建物の構造を数値化（学習用データの頻出数からランクわけ）
    bld_dict = {'ＲＣ':448093, 'ＳＲＣ':193381, '鉄骨造':4417, 'ＳＲＣ、ＲＣ':707, 'ＲＣ、鉄骨造':329, 
                'ＳＲＣ、鉄骨造':148, '木造':85, 'ブロック造':22, '軽量鉄骨造':18, 
                'ＳＲＣ、ＲＣ、鉄骨造':2, 'ＲＣ、木造':1, 'ＲＣ、ブロック造':1 }
    df["建物の構造"] = df["建物の構造"].replace(bld_dict)

    # 13.都道府県名を数値化（学習用データの頻出数からランクわけ）
    city_lank_dict = {'東京都':198606,'神奈川県':94597,'大阪府':74866,'兵庫県':40521,'埼玉県':40080,'千葉県':34501,
                '愛知県':31767,'福岡県':31168,'北海道':22474,'京都府':15691,'宮城県':10275,'静岡県':6668,
                '広島県':5532,'奈良県':4979,'新潟県':3595,'滋賀県':3466,'茨城県':3388,'大分県':2742,'岡山県':2558,
                '熊本県':2490,'愛媛県':1996,'栃木県':1944,'山口県':1908,'沖縄県':1897,'福島県':1872,'香川県':1868,
                '鹿児島県':1855,'長崎県':1793,'三重県':1759,'石川県':1720,'群馬県':1718,'岐阜県':1378,'岩手県':1337,
                '長野県':1231,'宮崎県':1195,'富山県':936,'和歌山県':805,'秋田県':769,'青森県':729,'徳島県':619,
                '佐賀県':612,'鳥取県':579,'山梨県':552,'山形県':532,'福井県':526,'高知県':399,'島根県':306}
    df['都道府県名_頻出'] = df['都道府県名'].replace(city_lank_dict)

    # 14.建築年の列を削除
    df = df.drop(['建築年'],axis=1)

    # 15.以下の特徴量をカテゴリに変換
    for col in ["都道府県名", "市区町村名", "地区名", "間取り"]:
                df[col] = df[col].astype("category")
    return df